# 1 "fib.cilki"
#include <cilk-cilk2c.h>
# 214 "/usr/lib/gcc/x86_64-redhat-linux/4.1.2/include/stddef.h"
typedef unsigned long size_t;
# 34 "/usr/include/bits/types.h"
typedef unsigned char __u_char;
typedef unsigned short __u_short;
typedef unsigned __u_int;
typedef unsigned long __u_long;


typedef signed char __int8_t;
typedef unsigned char __uint8_t;
typedef short __int16_t;
typedef unsigned short __uint16_t;
typedef int __int32_t;
typedef unsigned __uint32_t;

typedef long __int64_t;
typedef unsigned long __uint64_t;
# 56
typedef long __quad_t;
typedef unsigned long __u_quad_t;
# 137
typedef unsigned long __dev_t;
typedef unsigned __uid_t;
typedef unsigned __gid_t;
typedef unsigned long __ino_t;
typedef unsigned long __ino64_t;
typedef unsigned __mode_t;
typedef unsigned long __nlink_t;
typedef long __off_t;
typedef long __off64_t;
typedef int __pid_t;
typedef struct ___sue1{int __val[2];}__fsid_t;
typedef long __clock_t;
typedef unsigned long __rlim_t;
typedef unsigned long __rlim64_t;
typedef unsigned __id_t;
typedef long __time_t;
typedef unsigned __useconds_t;
typedef long __suseconds_t;

typedef int __daddr_t;
typedef long __swblk_t;
typedef int __key_t;


typedef int __clockid_t;


typedef void *__timer_t;


typedef long __blksize_t;
# 172
typedef long __blkcnt_t;
typedef long __blkcnt64_t;


typedef unsigned long __fsblkcnt_t;
typedef unsigned long __fsblkcnt64_t;


typedef unsigned long __fsfilcnt_t;
typedef unsigned long __fsfilcnt64_t;

typedef long __ssize_t;
# 187
typedef __off64_t __loff_t;
typedef __quad_t *__qaddr_t;
typedef char *__caddr_t;


typedef long __intptr_t;


typedef unsigned __socklen_t;
# 35 "/usr/include/sys/types.h"
typedef __u_char u_char;
typedef __u_short u_short;
typedef __u_int u_int;
typedef __u_long u_long;
typedef __quad_t quad_t;
typedef __u_quad_t u_quad_t;
typedef __fsid_t fsid_t;
# 46
typedef __loff_t loff_t;
# 50
typedef __ino_t ino_t;
# 62
typedef __dev_t dev_t;
# 67
typedef __gid_t gid_t;
# 72
typedef __mode_t mode_t;
# 77
typedef __nlink_t nlink_t;
# 82
typedef __uid_t uid_t;
# 88
typedef __off_t off_t;
# 100
typedef __pid_t pid_t;
# 105
typedef __id_t id_t;
# 110
typedef __ssize_t ssize_t;
# 116
typedef __daddr_t daddr_t;
typedef __caddr_t caddr_t;
# 123
typedef __key_t key_t;
# 77 "/usr/include/time.h"
typedef __time_t time_t;
# 93
typedef __clockid_t clockid_t;
# 105
typedef __timer_t timer_t;
# 151 "/usr/include/sys/types.h"
typedef unsigned long ulong;
typedef unsigned short ushort;
typedef unsigned uint;
# 195
typedef __attribute__((__mode__ (            __QI__)))int int8_t;
typedef __attribute__((__mode__ (             __HI__)))int int16_t;
typedef __attribute__((__mode__ (             __SI__)))int int32_t;
typedef __attribute__((__mode__ (             __DI__)))int int64_t;


typedef __attribute__((__mode__ (                       __QI__)))unsigned u_int8_t;
typedef __attribute__((__mode__ (                        __HI__)))unsigned u_int16_t;
typedef __attribute__((__mode__ (                        __SI__)))unsigned u_int32_t;
typedef __attribute__((__mode__ (                        __DI__)))unsigned u_int64_t;

typedef __attribute__((__mode__ (                __word__)))int register_t;
# 23 "/usr/include/bits/sigset.h"
typedef int __sig_atomic_t;
# 28
typedef struct ___sue2
  {
    unsigned long __val    [(1024/  (8*  sizeof( unsigned long)))];
  }
# 28
__sigset_t;
# 38 "/usr/include/sys/select.h"
typedef __sigset_t sigset_t;
# 121 "/usr/include/time.h"
struct timespec
  {
    __time_t tv_sec;
    long tv_nsec;
  };
# 69 "/usr/include/bits/time.h"
struct timeval
  {
    __time_t tv_sec;
    __suseconds_t tv_usec;
  };
# 49 "/usr/include/sys/select.h"
typedef __suseconds_t suseconds_t;
# 55
typedef long __fd_mask;
# 67
typedef struct ___sue3
  {
# 75
    __fd_mask __fds_bits[1024 / (8*  sizeof( __fd_mask))];


  }
# 67
fd_set;
# 85
typedef __fd_mask fd_mask;
# 109
extern int select (int __nfds, fd_set *__restrict __readfds,
     fd_set *__restrict __writefds,
     fd_set *__restrict __exceptfds,
     struct timeval *__restrict __timeout);
# 121
extern int pselect (int __nfds, fd_set *__restrict __readfds,
      fd_set *__restrict __writefds,
      fd_set *__restrict __exceptfds,
      const struct timespec *__restrict __timeout,
      const __sigset_t *__restrict __sigmask);
# 30 "/usr/include/sys/sysmacros.h"
extern __attribute__((__nothrow__))inline unsigned gnu_dev_major(unsigned long long __dev);


extern __attribute__((__nothrow__))inline unsigned gnu_dev_minor(unsigned long long __dev);


extern __attribute__((__nothrow__))inline unsigned long long gnu_dev_makedev(unsigned __major,
       unsigned __minor);
#undef CILK_WHERE_AM_I
#define CILK_WHERE_AM_I IN_C_CODE

              extern __attribute__((__nothrow__))inline unsigned gnu_dev_major(
                                             unsigned long long __dev)
{
  return ((__dev>>  8)&  0xfff) | ((unsigned)     (__dev>>  32)&  ~0xfff);
}
#undef CILK_WHERE_AM_I
#define CILK_WHERE_AM_I IN_C_CODE
# 47
              extern __attribute__((__nothrow__))inline unsigned gnu_dev_minor(
                                             unsigned long long __dev)
{
  return (__dev&  0xff) | ((unsigned)     (__dev>>  12)&  ~0xff);
}
#undef CILK_WHERE_AM_I
#define CILK_WHERE_AM_I IN_C_CODE
# 53
              extern __attribute__((__nothrow__))inline unsigned long long gnu_dev_makedev(
                                               unsigned __major,     unsigned __minor)
{
  return ((__minor&  0xff) | ((__major&  0xfff)<<  8)
   | (((unsigned long long)     (__minor&  ~0xff))<<  12)
# 56
         |

     (((unsigned long long)     (__major&  ~0xfff))<<  32));
}
# 235 "/usr/include/sys/types.h"
typedef __blkcnt_t blkcnt_t;
# 239
typedef __fsblkcnt_t fsblkcnt_t;
# 243
typedef __fsfilcnt_t fsfilcnt_t;
# 50 "/usr/include/bits/pthreadtypes.h"
typedef unsigned long pthread_t;


typedef union ___sue4
{
  char __size[56];
  long __align;
}
# 53
pthread_attr_t;
# 61
typedef struct __pthread_internal_list
{
  struct __pthread_internal_list *__prev;
  struct __pthread_internal_list *__next;
}
# 61
__pthread_list_t;
# 76
typedef union ___sue5
{
  struct __pthread_mutex_s
  {
    int __lock;
    unsigned __count;
    int __owner;

    unsigned __nusers;
# 88
    int __kind;

    int __spins;
    __pthread_list_t __list;
# 101
  }
# 78
  __data;
# 102
  char __size[40];
  long __align;
}
# 76
pthread_mutex_t;
# 106
typedef union ___sue6
{
  char __size[4];
  int __align;
}
# 106
pthread_mutexattr_t;
# 115
typedef union ___sue8
{
  struct ___sue7
  {
    int __lock;
    unsigned __futex;
    __extension__ unsigned long long __total_seq;
    __extension__ unsigned long long __wakeup_seq;
    __extension__ unsigned long long __woken_seq;
    void *__mutex;
    unsigned __nwaiters;
    unsigned __broadcast_seq;
  }
# 117
  __data;
# 128
  char __size[48];
  __extension__ long long __align;
}
# 115
pthread_cond_t;
# 132
typedef union ___sue9
{
  char __size[4];
  int __align;
}
# 132
pthread_condattr_t;
# 140
typedef unsigned pthread_key_t;
# 144
typedef int pthread_once_t;
# 150
typedef union ___sue11
{

  struct ___sue10
  {
    int __lock;
    unsigned __nr_readers;
    unsigned __readers_wakeup;
    unsigned __writer_wakeup;
    unsigned __nr_readers_queued;
    unsigned __nr_writers_queued;
    int __writer;
    int __pad1;
    unsigned long __pad2;
    unsigned long __pad3;


    unsigned __flags;
  }
# 153
  __data;
# 184
  char __size[56];
  long __align;
}
# 150
pthread_rwlock_t;
# 188
typedef union ___sue12
{
  char __size[8];
  long __align;
}
# 188
pthread_rwlockattr_t;
# 198
typedef volatile int pthread_spinlock_t;
# 203
typedef union ___sue13
{
  char __size[32];
  long __align;
}
# 203
pthread_barrier_t;
# 209
typedef union ___sue14
{
  char __size[4];
  int __align;
}
# 209
pthread_barrierattr_t;
# 152 "/usr/lib/gcc/x86_64-redhat-linux/4.1.2/include/stddef.h"
typedef long ptrdiff_t;
# 326
typedef int wchar_t;
# 146 "/usr/local/cilk-5.4.6/include/cilk/cilk-sysdep.h"
static __attribute__((__unused__))const char*ident_cilk_sysdep_h=    "$HeadURL: https://bradley.csail.mit.edu/svn/repos/cilk/5.4.3/runtime/cilk-sysdep.h.in $ $LastChangedBy: bradley $ $Rev: 2311 $ $Date: 2005-07-13 17:38:21 -0400 (Wed, 13 Jul 2005) $";
#undef CILK_WHERE_AM_I
#define CILK_WHERE_AM_I IN_C_CODE
# 295
   static inline void CILK_MB(void) {
     __asm__ volatile  ("mfence" :  :  : "memory");
   }
#undef CILK_WHERE_AM_I
#define CILK_WHERE_AM_I IN_C_CODE


   static inline int Cilk_xchg(volatile int *ptr, int x)
   {
 __asm__ ("xchgl %0,%1" : "=r"(x) : "m"(*(ptr)),"0" (x) : "memory");
 return x;
   }
# 57 "/usr/include/sys/time.h"
struct timezone
  {
    int tz_minuteswest;
    int tz_dsttime;
  };

typedef struct timezone *__restrict __timezone_ptr_t;
# 73
extern __attribute__((__nothrow__,__nonnull__ (
                                                                                      1)))
# 73
int gettimeofday        (struct timeval *__restrict __tv,
    __timezone_ptr_t __tz);
# 79
extern __attribute__((__nothrow__,__nonnull__ (

                                                                1)))
# 79
int settimeofday        (const struct timeval   *__tv,
    const struct timezone   *__tz);
# 87
extern __attribute__((__nothrow__))int adjtime(const struct timeval*__delta,
      struct timeval *__olddelta);
# 93
enum __itimer_which
  {

    ITIMER_REAL=  0,


    ITIMER_VIRTUAL=  1,
# 103
    ITIMER_PROF=  2

  };
# 109
struct itimerval
  {

    struct timeval it_interval;

    struct timeval it_value;
  };
# 122
typedef int __itimer_which_t;
# 127
extern __attribute__((__nothrow__))int getitimer(__itimer_which_t __which,
        struct itimerval *__value);
# 133
extern __attribute__((__nothrow__))int setitimer(__itimer_which_t __which,
        const struct itimerval   *__restrict __new,
        struct itimerval *__restrict __old);
# 140
extern __attribute__((__nothrow__,__nonnull__ (
                                                                1)))
# 140
int utimes        (const char   *__file, const struct timeval        *__tvp);
# 145
extern __attribute__((__nothrow__,__nonnull__ (
                                                                1)))
# 145
int lutimes        (const char   *__file, const struct timeval        *__tvp);
# 149
extern __attribute__((__nothrow__))int futimes(int __fd,const struct timeval*__tvp);
# 224 "/usr/include/unistd.h"
typedef __useconds_t useconds_t;
# 236
typedef __intptr_t intptr_t;
# 243
typedef __socklen_t socklen_t;
# 256
extern __attribute__((__nothrow__,__nonnull__ (                                                                 1)))int access(const char*__name,int __type);
# 299
extern __attribute__((__nothrow__))__off_t lseek(int __fd,__off_t __offset,int __whence);
# 318
extern int close (int __fd);
# 325
extern ssize_t read (int __fd, void *__buf, size_t __nbytes);
# 331
extern ssize_t write (int __fd, const void   *__buf, size_t __n);
# 382
extern __attribute__((__nothrow__))int pipe(int*__pipedes);
# 391
extern __attribute__((__nothrow__))unsigned alarm(unsigned __seconds);
# 403
extern unsigned sleep     (unsigned __seconds);
# 410
extern __attribute__((__nothrow__))__useconds_t ualarm(__useconds_t __value,__useconds_t __interval);
# 418
extern int usleep (__useconds_t __useconds);
# 427
extern int pause (void);
# 431
extern __attribute__((__nothrow__,__nonnull__ (
                                                                1)))
# 431
int chown        (const char   *__file, __uid_t __owner, __gid_t __group);
# 436
extern __attribute__((__nothrow__))int fchown(int __fd,__uid_t __owner,__gid_t __group);
# 441
extern __attribute__((__nothrow__,__nonnull__ (
                                                                1)))
# 441
int lchown        (const char   *__file, __uid_t __owner, __gid_t __group);
# 455
extern __attribute__((__nothrow__,__nonnull__ (                                                    1)))int chdir(const char*__path);
# 459
extern __attribute__((__nothrow__))int fchdir(int __fd);
# 469
extern __attribute__((__nothrow__))char*getcwd(char*__buf,size_t __size);
# 482
extern __attribute__((__nothrow__,__nonnull__ (
                                                                1),__deprecated__))
# 482
char        *getwd (char *__buf);
# 488
extern __attribute__((__nothrow__))int dup(int __fd);


extern __attribute__((__nothrow__))int dup2(int __fd,int __fd2);


extern char **__environ;
# 502
extern __attribute__((__nothrow__,__nonnull__ (
                                                                                        1)))
# 502
int execve        (const char   *__path, char *const         *__argv,
     char *const         *__envp);
# 514
extern __attribute__((__nothrow__,__nonnull__ (
                                                                1)))
# 514
int execv        (const char   *__path, char *const         *__argv);
# 519
extern __attribute__((__nothrow__,__nonnull__ (
                                                                1)))
# 519
int execle        (const char   *__path, const char   *__arg,...);
# 524
extern __attribute__((__nothrow__,__nonnull__ (
                                                                1)))
# 524
int execl        (const char   *__path, const char   *__arg,...);
# 529
extern __attribute__((__nothrow__,__nonnull__ (
                                                                1)))
# 529
int execvp        (const char   *__file, char *const         *__argv);
# 535
extern __attribute__((__nothrow__,__nonnull__ (
                                                                1)))
# 535
int execlp        (const char   *__file, const char   *__arg,...);
# 541
extern __attribute__((__nothrow__))int nice(int __inc);
# 546
extern __attribute__((__noreturn__))void _exit(int __status);
# 26 "/usr/include/bits/confname.h"
enum ___sue15
  {
    _PC_LINK_MAX,

    _PC_MAX_CANON,

    _PC_MAX_INPUT,

    _PC_NAME_MAX,

    _PC_PATH_MAX,

    _PC_PIPE_BUF,

    _PC_CHOWN_RESTRICTED,

    _PC_NO_TRUNC,

    _PC_VDISABLE,

    _PC_SYNC_IO,

    _PC_ASYNC_IO,

    _PC_PRIO_IO,

    _PC_SOCK_MAXBUF,

    _PC_FILESIZEBITS,

    _PC_REC_INCR_XFER_SIZE,

    _PC_REC_MAX_XFER_SIZE,

    _PC_REC_MIN_XFER_SIZE,

    _PC_REC_XFER_ALIGN,

    _PC_ALLOC_SIZE_MIN,

    _PC_SYMLINK_MAX,

    _PC_2_SYMLINKS

  };


enum ___sue16
  {
    _SC_ARG_MAX,

    _SC_CHILD_MAX,

    _SC_CLK_TCK,

    _SC_NGROUPS_MAX,

    _SC_OPEN_MAX,

    _SC_STREAM_MAX,

    _SC_TZNAME_MAX,

    _SC_JOB_CONTROL,

    _SC_SAVED_IDS,

    _SC_REALTIME_SIGNALS,

    _SC_PRIORITY_SCHEDULING,

    _SC_TIMERS,

    _SC_ASYNCHRONOUS_IO,

    _SC_PRIORITIZED_IO,

    _SC_SYNCHRONIZED_IO,

    _SC_FSYNC,

    _SC_MAPPED_FILES,

    _SC_MEMLOCK,

    _SC_MEMLOCK_RANGE,

    _SC_MEMORY_PROTECTION,

    _SC_MESSAGE_PASSING,

    _SC_SEMAPHORES,

    _SC_SHARED_MEMORY_OBJECTS,

    _SC_AIO_LISTIO_MAX,

    _SC_AIO_MAX,

    _SC_AIO_PRIO_DELTA_MAX,

    _SC_DELAYTIMER_MAX,

    _SC_MQ_OPEN_MAX,

    _SC_MQ_PRIO_MAX,

    _SC_VERSION,

    _SC_PAGESIZE,


    _SC_RTSIG_MAX,

    _SC_SEM_NSEMS_MAX,

    _SC_SEM_VALUE_MAX,

    _SC_SIGQUEUE_MAX,

    _SC_TIMER_MAX,
# 151
    _SC_BC_BASE_MAX,

    _SC_BC_DIM_MAX,

    _SC_BC_SCALE_MAX,

    _SC_BC_STRING_MAX,

    _SC_COLL_WEIGHTS_MAX,

    _SC_EQUIV_CLASS_MAX,

    _SC_EXPR_NEST_MAX,

    _SC_LINE_MAX,

    _SC_RE_DUP_MAX,

    _SC_CHARCLASS_NAME_MAX,


    _SC_2_VERSION,

    _SC_2_C_BIND,

    _SC_2_C_DEV,

    _SC_2_FORT_DEV,

    _SC_2_FORT_RUN,

    _SC_2_SW_DEV,

    _SC_2_LOCALEDEF,


    _SC_PII,

    _SC_PII_XTI,

    _SC_PII_SOCKET,

    _SC_PII_INTERNET,

    _SC_PII_OSI,

    _SC_POLL,

    _SC_SELECT,

    _SC_UIO_MAXIOV,

    _SC_IOV_MAX=  _SC_UIO_MAXIOV,

    _SC_PII_INTERNET_STREAM,

    _SC_PII_INTERNET_DGRAM,

    _SC_PII_OSI_COTS,

    _SC_PII_OSI_CLTS,

    _SC_PII_OSI_M,

    _SC_T_IOV_MAX,
# 219
    _SC_THREADS,

    _SC_THREAD_SAFE_FUNCTIONS,

    _SC_GETGR_R_SIZE_MAX,

    _SC_GETPW_R_SIZE_MAX,

    _SC_LOGIN_NAME_MAX,

    _SC_TTY_NAME_MAX,

    _SC_THREAD_DESTRUCTOR_ITERATIONS,

    _SC_THREAD_KEYS_MAX,

    _SC_THREAD_STACK_MIN,

    _SC_THREAD_THREADS_MAX,

    _SC_THREAD_ATTR_STACKADDR,

    _SC_THREAD_ATTR_STACKSIZE,

    _SC_THREAD_PRIORITY_SCHEDULING,

    _SC_THREAD_PRIO_INHERIT,

    _SC_THREAD_PRIO_PROTECT,

    _SC_THREAD_PROCESS_SHARED,


    _SC_NPROCESSORS_CONF,

    _SC_NPROCESSORS_ONLN,

    _SC_PHYS_PAGES,

    _SC_AVPHYS_PAGES,

    _SC_ATEXIT_MAX,

    _SC_PASS_MAX,


    _SC_XOPEN_VERSION,

    _SC_XOPEN_XCU_VERSION,

    _SC_XOPEN_UNIX,

    _SC_XOPEN_CRYPT,

    _SC_XOPEN_ENH_I18N,

    _SC_XOPEN_SHM,


    _SC_2_CHAR_TERM,

    _SC_2_C_VERSION,

    _SC_2_UPE,


    _SC_XOPEN_XPG2,

    _SC_XOPEN_XPG3,

    _SC_XOPEN_XPG4,


    _SC_CHAR_BIT,

    _SC_CHAR_MAX,

    _SC_CHAR_MIN,

    _SC_INT_MAX,

    _SC_INT_MIN,

    _SC_LONG_BIT,

    _SC_WORD_BIT,

    _SC_MB_LEN_MAX,

    _SC_NZERO,

    _SC_SSIZE_MAX,

    _SC_SCHAR_MAX,

    _SC_SCHAR_MIN,

    _SC_SHRT_MAX,

    _SC_SHRT_MIN,

    _SC_UCHAR_MAX,

    _SC_UINT_MAX,

    _SC_ULONG_MAX,

    _SC_USHRT_MAX,


    _SC_NL_ARGMAX,

    _SC_NL_LANGMAX,

    _SC_NL_MSGMAX,

    _SC_NL_NMAX,

    _SC_NL_SETMAX,

    _SC_NL_TEXTMAX,


    _SC_XBS5_ILP32_OFF32,

    _SC_XBS5_ILP32_OFFBIG,

    _SC_XBS5_LP64_OFF64,

    _SC_XBS5_LPBIG_OFFBIG,


    _SC_XOPEN_LEGACY,

    _SC_XOPEN_REALTIME,

    _SC_XOPEN_REALTIME_THREADS,


    _SC_ADVISORY_INFO,

    _SC_BARRIERS,

    _SC_BASE,

    _SC_C_LANG_SUPPORT,

    _SC_C_LANG_SUPPORT_R,

    _SC_CLOCK_SELECTION,

    _SC_CPUTIME,

    _SC_THREAD_CPUTIME,

    _SC_DEVICE_IO,

    _SC_DEVICE_SPECIFIC,

    _SC_DEVICE_SPECIFIC_R,

    _SC_FD_MGMT,

    _SC_FIFO,

    _SC_PIPE,

    _SC_FILE_ATTRIBUTES,

    _SC_FILE_LOCKING,

    _SC_FILE_SYSTEM,

    _SC_MONOTONIC_CLOCK,

    _SC_MULTI_PROCESS,

    _SC_SINGLE_PROCESS,

    _SC_NETWORKING,

    _SC_READER_WRITER_LOCKS,

    _SC_SPIN_LOCKS,

    _SC_REGEXP,

    _SC_REGEX_VERSION,

    _SC_SHELL,

    _SC_SIGNALS,

    _SC_SPAWN,

    _SC_SPORADIC_SERVER,

    _SC_THREAD_SPORADIC_SERVER,

    _SC_SYSTEM_DATABASE,

    _SC_SYSTEM_DATABASE_R,

    _SC_TIMEOUTS,

    _SC_TYPED_MEMORY_OBJECTS,

    _SC_USER_GROUPS,

    _SC_USER_GROUPS_R,

    _SC_2_PBS,

    _SC_2_PBS_ACCOUNTING,

    _SC_2_PBS_LOCATE,

    _SC_2_PBS_MESSAGE,

    _SC_2_PBS_TRACK,

    _SC_SYMLOOP_MAX,

    _SC_STREAMS,

    _SC_2_PBS_CHECKPOINT,


    _SC_V6_ILP32_OFF32,

    _SC_V6_ILP32_OFFBIG,

    _SC_V6_LP64_OFF64,

    _SC_V6_LPBIG_OFFBIG,


    _SC_HOST_NAME_MAX,

    _SC_TRACE,

    _SC_TRACE_EVENT_FILTER,

    _SC_TRACE_INHERIT,

    _SC_TRACE_LOG,


    _SC_LEVEL1_ICACHE_SIZE,

    _SC_LEVEL1_ICACHE_ASSOC,

    _SC_LEVEL1_ICACHE_LINESIZE,

    _SC_LEVEL1_DCACHE_SIZE,

    _SC_LEVEL1_DCACHE_ASSOC,

    _SC_LEVEL1_DCACHE_LINESIZE,

    _SC_LEVEL2_CACHE_SIZE,

    _SC_LEVEL2_CACHE_ASSOC,

    _SC_LEVEL2_CACHE_LINESIZE,

    _SC_LEVEL3_CACHE_SIZE,

    _SC_LEVEL3_CACHE_ASSOC,

    _SC_LEVEL3_CACHE_LINESIZE,

    _SC_LEVEL4_CACHE_SIZE,

    _SC_LEVEL4_CACHE_ASSOC,

    _SC_LEVEL4_CACHE_LINESIZE,
# 499
    _SC_IPV6=  _SC_LEVEL1_ICACHE_SIZE + 50,

    _SC_RAW_SOCKETS

  };


enum ___sue17
  {
    _CS_PATH,


    _CS_V6_WIDTH_RESTRICTED_ENVS,


    _CS_GNU_LIBC_VERSION,

    _CS_GNU_LIBPTHREAD_VERSION,


    _CS_LFS_CFLAGS=  1000,

    _CS_LFS_LDFLAGS,

    _CS_LFS_LIBS,

    _CS_LFS_LINTFLAGS,

    _CS_LFS64_CFLAGS,

    _CS_LFS64_LDFLAGS,

    _CS_LFS64_LIBS,

    _CS_LFS64_LINTFLAGS,


    _CS_XBS5_ILP32_OFF32_CFLAGS=  1100,

    _CS_XBS5_ILP32_OFF32_LDFLAGS,

    _CS_XBS5_ILP32_OFF32_LIBS,

    _CS_XBS5_ILP32_OFF32_LINTFLAGS,

    _CS_XBS5_ILP32_OFFBIG_CFLAGS,

    _CS_XBS5_ILP32_OFFBIG_LDFLAGS,

    _CS_XBS5_ILP32_OFFBIG_LIBS,

    _CS_XBS5_ILP32_OFFBIG_LINTFLAGS,

    _CS_XBS5_LP64_OFF64_CFLAGS,

    _CS_XBS5_LP64_OFF64_LDFLAGS,

    _CS_XBS5_LP64_OFF64_LIBS,

    _CS_XBS5_LP64_OFF64_LINTFLAGS,

    _CS_XBS5_LPBIG_OFFBIG_CFLAGS,

    _CS_XBS5_LPBIG_OFFBIG_LDFLAGS,

    _CS_XBS5_LPBIG_OFFBIG_LIBS,

    _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS,


    _CS_POSIX_V6_ILP32_OFF32_CFLAGS,

    _CS_POSIX_V6_ILP32_OFF32_LDFLAGS,

    _CS_POSIX_V6_ILP32_OFF32_LIBS,

    _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS,

    _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS,

    _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS,

    _CS_POSIX_V6_ILP32_OFFBIG_LIBS,

    _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS,

    _CS_POSIX_V6_LP64_OFF64_CFLAGS,

    _CS_POSIX_V6_LP64_OFF64_LDFLAGS,

    _CS_POSIX_V6_LP64_OFF64_LIBS,

    _CS_POSIX_V6_LP64_OFF64_LINTFLAGS,

    _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS,

    _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS,

    _CS_POSIX_V6_LPBIG_OFFBIG_LIBS,

    _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS

  };
# 555 "/usr/include/unistd.h"
extern __attribute__((__nothrow__,__nonnull__ (
                                                                1)))
# 555
long pathconf            (const char   *__path, int __name);
# 559
extern __attribute__((__nothrow__))long fpathconf(int __fd,int __name);


extern __attribute__((__nothrow__,const))long sysconf(int __name);
# 566
extern __attribute__((__nothrow__))size_t confstr(int __name,char*__buf,size_t __len);
# 571
extern __attribute__((__nothrow__))__pid_t getpid(void);


extern __attribute__((__nothrow__))__pid_t getppid(void);
# 579
extern __attribute__((__nothrow__))__pid_t getpgrp(void);
# 589
extern __attribute__((__nothrow__))__pid_t __getpgid(__pid_t __pid);
# 598
extern __attribute__((__nothrow__))int setpgid(__pid_t __pid,__pid_t __pgid);
# 615
extern __attribute__((__nothrow__))int setpgrp(void);
# 632
extern __attribute__((__nothrow__))__pid_t setsid(void);
# 640
extern __attribute__((__nothrow__))__uid_t getuid(void);


extern __attribute__((__nothrow__))__uid_t geteuid(void);


extern __attribute__((__nothrow__))__gid_t getgid(void);


extern __attribute__((__nothrow__))__gid_t getegid(void);
# 654
extern __attribute__((__nothrow__))int getgroups(int __size,__gid_t*__list);
# 665
extern __attribute__((__nothrow__))int setuid(__uid_t __uid);
# 670
extern __attribute__((__nothrow__))int setreuid(__uid_t __ruid,__uid_t __euid);
# 675
extern __attribute__((__nothrow__))int seteuid(__uid_t __uid);
# 682
extern __attribute__((__nothrow__))int setgid(__gid_t __gid);
# 687
extern __attribute__((__nothrow__))int setregid(__gid_t __rgid,__gid_t __egid);
# 692
extern __attribute__((__nothrow__))int setegid(__gid_t __gid);
# 721
extern __attribute__((__nothrow__))__pid_t fork(void);
# 728
extern __attribute__((__nothrow__))__pid_t vfork(void);
# 734
extern __attribute__((__nothrow__))char*ttyname(int __fd);
# 738
extern __attribute__((__nothrow__,__nonnull__ (
                                                                2)))
# 738
int ttyname_r        (int __fd, char *__buf, size_t __buflen);
# 743
extern __attribute__((__nothrow__))int isatty(int __fd);
# 749
extern __attribute__((__nothrow__))int ttyslot(void);
# 754
extern __attribute__((__nothrow__,__nonnull__ (
                                                                1, 2)))
# 754
int link        (const char   *__from, const char   *__to);
# 767
extern __attribute__((__nothrow__,__nonnull__ (
                                                                1, 2)))
# 767
int symlink        (const char   *__from, const char   *__to);
# 773
extern __attribute__((__nothrow__,__nonnull__ (

                                                                1, 2)))
# 773
ssize_t readlink        (const char   *__restrict __path,
    char *__restrict __buf, size_t __len);
# 790
extern __attribute__((__nothrow__,__nonnull__ (                                                     1)))int unlink(const char*__name);
# 799
extern __attribute__((__nothrow__,__nonnull__ (                                                    1)))int rmdir(const char*__path);
# 803
extern __attribute__((__nothrow__))__pid_t tcgetpgrp(int __fd);


extern __attribute__((__nothrow__))int tcsetpgrp(int __fd,__pid_t __pgrp_id);
# 813
extern char *getlogin (void);
# 821
extern __attribute__((__nonnull__ (                                                  1)))int getlogin_r(char*__name,size_t __name_len);
# 826
extern __attribute__((__nothrow__,__nonnull__ (                                                       1)))int setlogin(const char*__name);
# 59 "/usr/include/getopt.h"
extern char *optarg;
# 73
extern int optind;
# 78
extern int opterr;
# 82
extern int optopt;
# 152
extern __attribute__((__nothrow__))int getopt(int ___argc,char*const *___argv,const char*__shortopts);
# 843 "/usr/include/unistd.h"
extern __attribute__((__nothrow__,__nonnull__ (                                                                1)))int gethostname(char*__name,size_t __len);
# 850
extern __attribute__((__nothrow__,__nonnull__ (
                                                                1)))
# 850
int sethostname        (const char   *__name, size_t __len);
# 855
extern __attribute__((__nothrow__))int sethostid(long __id);
# 861
extern __attribute__((__nothrow__,__nonnull__ (
                                                                1)))
# 861
int getdomainname        (char *__name, size_t __len);

extern __attribute__((__nothrow__,__nonnull__ (
                                                                1)))
# 863
int setdomainname        (const char   *__name, size_t __len);
# 870
extern __attribute__((__nothrow__))int vhangup(void);


extern __attribute__((__nothrow__,__nonnull__ (                                                     1)))int revoke(const char*__file);
# 881
extern __attribute__((__nothrow__,__nonnull__ (

                                                                1)))
# 881
int profil        (unsigned short     *__sample_buffer, size_t __size,
     size_t __offset, unsigned __scale);
# 889
extern __attribute__((__nothrow__))int acct(const char*__name);
# 893
extern __attribute__((__nothrow__))char*getusershell(void);
extern __attribute__((__nothrow__))void endusershell(void);
extern __attribute__((__nothrow__))void setusershell(void);
# 901
extern __attribute__((__nothrow__))int daemon(int __nochdir,int __noclose);
# 908
extern __attribute__((__nothrow__,__nonnull__ (                                                     1)))int chroot(const char*__path);
# 912
extern __attribute__((__nonnull__ (                                        1)))char*getpass(const char*__prompt);
# 921
extern int fsync (int __fd);
# 928
extern long gethostid     (void);


extern __attribute__((__nothrow__))void sync(void);
# 936
extern __attribute__((__nothrow__,const))int getpagesize(void);
# 941
extern __attribute__((__nothrow__))int getdtablesize(void);
# 946
extern __attribute__((__nothrow__,__nonnull__ (
                                                                1)))
# 946
int truncate        (const char   *__file, __off_t __length);
# 968
extern __attribute__((__nothrow__))int ftruncate(int __fd,__off_t __length);
# 988
extern __attribute__((__nothrow__))int brk(void*__addr);
# 994
extern __attribute__((__nothrow__))void*sbrk(intptr_t __delta);
# 1009
extern __attribute__((__nothrow__))long syscall(long __sysno,...);
# 1032
extern int lockf (int __fd, int __cmd, __off_t __len);
# 1063
extern __attribute__((__nothrow__))int fdatasync(int __fildes);
# 522 "/usr/local/cilk-5.4.6/include/cilk/cilk-sysdep.h"
typedef long long Cilk_time;
#undef CILK_WHERE_AM_I
#define CILK_WHERE_AM_I IN_C_CODE
# 524
static inline Cilk_time Cilk_get_time(void)
{
     struct timeval tv;
     gettimeofday(&tv, 0);

     return ((Cilk_time)tv.tv_sec * 1000000LL+  (Cilk_time)tv.tv_usec);
}
#undef CILK_WHERE_AM_I
#define CILK_WHERE_AM_I IN_C_CODE
# 532
static inline double Cilk_time_to_sec(Cilk_time t)
{
     return (double) t * 1.0E-6;
}
#undef CILK_WHERE_AM_I
#define CILK_WHERE_AM_I IN_C_CODE
# 537
static inline Cilk_time Cilk_get_wall_time(void)
{
     return Cilk_get_time();
}
#undef CILK_WHERE_AM_I
#define CILK_WHERE_AM_I IN_C_CODE
# 542
static inline double Cilk_wall_time_to_sec(Cilk_time t)
{
     return Cilk_time_to_sec(t);
}
# 44 "/usr/local/cilk-5.4.6/include/cilk/cilk.h"
static __attribute__((__unused__))const char*cilk_h_ident=    "$HeadURL: https://bradley.csail.mit.edu/svn/repos/cilk/5.4.3/runtime/cilk.h $ $LastChangedBy: bradley $ $Rev: 2672 $ $Date: 2005-12-20 13:30:02 -0500 (Tue, 20 Dec 2005) $";
# 27 "/usr/local/cilk-5.4.6/include/cilk/cilk-conf.h"
static __attribute__((__unused__))const char*ident_cilk_conf_h=    "$HeadURL: https://bradley.csail.mit.edu/svn/repos/cilk/5.4.3/runtime/cilk-conf.h $ $LastChangedBy: bradley $ $Rev: 1465 $ $Date: 2004-08-02 06:31:06 -0400 (Mon, 02 Aug 2004) $";
# 78 "/usr/local/cilk-5.4.6/include/cilk/cilk.h"
typedef struct ___sue18{
     int size;
     ptrdiff_t index;
     void( *inlet) ();
     int argsize;
     ptrdiff_t argindex;
}
# 78
CilkProcInfo;
# 89
struct cilk_alloca_header {
     struct cilk_alloca_header *next;
     size_t size;
};
# 97
typedef void( *HookT)(void);

typedef struct hook {
     HookT fn;
     struct hook *next;
}
# 99
HookList;
# 104
extern void Cilk_add_hook(HookList **listp, HookT fn);
extern void Cilk_run_hooks(HookList *list);
# 113
extern HookList              *Cilk_init_global_hooks;
extern HookList              *Cilk_init_per_worker_hooks;
# 129
typedef struct ___sue19{
     int entry;
     void *receiver;

     CilkProcInfo *sig;
     struct cilk_alloca_header *alloca_h;
# 143
}
# 129
CilkStackFrame;
# 148
typedef CilkStackFrame **CilkStack;
# 166
typedef struct ___sue20{
     volatile CilkStackFrame **head;volatile CilkStackFrame**tail;

     volatile CilkStackFrame **exception;
     CilkStack stack;
     char __dummy[64];
}
# 166
CilkClosureCache;
# 175
struct Cilk_im_descriptor {
     void *free_list;
     int length;
# 182
     int count;
};


struct Cilk_im_stats {
     int used;
     int nmalloc;
     int in_free_lists;


     int length[9];
     char __dummy[64];
};


typedef struct Closure_s Closure;
typedef struct Cilk_options_s Cilk_options;
# 204
typedef struct ___sue21{
# 211
   struct Cilk_im_stats *im_info;


 Cilk_options *options;
# 220
 const char *assertion_failed_msg;
 const char *stack_overflow_msg;


 int active_size;
        int pthread_stacksize;
# 232
 void *infofile;
# 248
 unsigned num_threads;
 unsigned num_steals;
# 255
 struct ReadyDeque *deques;

 Cilk_time start_time;

 Closure *invoke_main;


 HookList *Cilk_init_global_hooks;
 HookList *Cilk_init_per_worker_hooks;

}
# 204
CilkReadOnlyParams;
# 268
typedef struct CilkGlobalState_s CilkGlobalState;

typedef struct ___sue22{

        CilkReadOnlyParams *Cilk_RO_params;
# 277
 CilkGlobalState *Cilk_global_state;

}
# 270
CilkContext;
# 283
typedef struct ___sue23{
     CilkClosureCache cache;
     int self;
     struct Cilk_im_descriptor im_descriptor [9];
     size_t stackdepth;
     Cilk_time last_cp_time;
     Cilk_time cp_hack;
     Cilk_time work_hack;
     Cilk_time user_work;
     Cilk_time user_critical_path;
     unsigned rand_next;
     int abort_flag;
     int barrier_direction;
     char __dummy[64];
     CilkContext *context;
# 301
}
# 283
CilkWorkerState;
# 303
typedef struct ___sue24{

 CilkContext *context;
 int id;

}
# 303
CilkChildParams;
# 314
extern void Cilk_dprintf(CilkWorkerState *const ws, const char *fmt,...);
extern void Cilk_die_internal(CilkContext *const context, CilkWorkerState *const ws, const char *fmt,...);
extern void Cilk_unalloca_internal(CilkWorkerState *const ws,
       CilkStackFrame *f);
# 322
extern void *Cilk_internal_malloc(CilkWorkerState *const ws, size_t);
extern void Cilk_internal_free(CilkWorkerState *const ws, void *p, size_t size);
# 335
extern CilkContext *Cilk_init(int*argc, char**argv);
extern void Cilk_terminate(CilkContext *const context);
#undef CILK_WHERE_AM_I
#define CILK_WHERE_AM_I IN_C_CODE



static inline Cilk_time Cilk_get_elapsed_time(CilkWorkerState *const ws)
{
     Cilk_time then=  ws->last_cp_time;
     Cilk_time now=  Cilk_get_time();;
# 349
     ws->last_cp_time = now;
     return now - then;
}
#undef CILK_WHERE_AM_I
#define CILK_WHERE_AM_I IN_C_CODE
# 362
static inline int Cilk_internal_malloc_canonicalize(size_t size)
{
     if (size <= 16 && 16 >= 64) return 16;;
     if (size <= 32 && 32 >= 64) return 32;;
     if (size <= 64 && 64 >= 64) return 64;;
     if (size <= 128 && 128 >= 64) return 128;;
     if (size <= 256 && 256 >= 64) return 256;;
     if (size <= 512 && 512 >= 64) return 512;;
     if (size <= 1024 && 1024 >= 64) return 1024;;
     if (size <= 2048 && 2048 >= 64) return 2048;;
     if (size <= 4096 && 4096 >= 64) return 4096;;
     return -1;
}
#undef CILK_WHERE_AM_I
#define CILK_WHERE_AM_I IN_C_CODE


static inline int Cilk_internal_malloc_size_to_bucket(size_t size)
{
     if (size <= 16 && 16 >= 64) return 0;;
     if (size <= 32 && 32 >= 64) return 1;;
     if (size <= 64 && 64 >= 64) return 2;;
     if (size <= 128 && 128 >= 64) return 3;;
     if (size <= 256 && 256 >= 64) return 4;;
     if (size <= 512 && 512 >= 64) return 5;;
     if (size <= 1024 && 1024 >= 64) return 6;;
     if (size <= 2048 && 2048 >= 64) return 7;;
     if (size <= 4096 && 4096 >= 64) return 8;;
     return -1;
}
#undef CILK_WHERE_AM_I
#define CILK_WHERE_AM_I IN_C_CODE


static inline int Cilk_internal_malloc_bucket_to_size(int b)
{
     if (0 == b) return 16;;
     if (1 == b) return 32;;
     if (2 == b) return 64;;
     if (3 == b) return 128;;
     if (4 == b) return 256;;
     if (5 == b) return 512;;
     if (6 == b) return 1024;;
     if (7 == b) return 2048;;
     if (8 == b) return 4096;;
     return -1;
}
#undef CILK_WHERE_AM_I
#define CILK_WHERE_AM_I IN_C_CODE
# 417
static inline void Cilk_fence(void)
{
     CILK_MB();
}
#undef CILK_WHERE_AM_I
#define CILK_WHERE_AM_I IN_C_CODE



static inline void Cilk_membar_StoreStore(void)
{
     __asm__ volatile  (   "" :  :  : "memory");
}
#undef CILK_WHERE_AM_I
#define CILK_WHERE_AM_I IN_C_CODE



static inline void Cilk_membar_StoreLoad(void)
{
     CILK_MB();
}
# 444
extern int Cilk_sync(CilkWorkerState *const ws);
extern int Cilk_exception_handler(CilkWorkerState *const ws, void *, int);
extern void Cilk_set_result(CilkWorkerState *const ws,
       void *resultp, int size);
extern void Cilk_after_sync_slow_cp(CilkWorkerState *const ws,
        Cilk_time *work, Cilk_time *cp);
extern void Cilk_abort_standalone(CilkWorkerState *const ws);
extern void Cilk_abort_slow(CilkWorkerState *const ws);
extern void Cilk_event_new_thread(CilkWorkerState *const ws);
extern void Cilk_destroy_frame(CilkWorkerState *const ws,
          CilkStackFrame *f, size_t size);
# 2 "/usr/local/cilk-5.4.6/include/cilk/cilk-cilk2c-pre.h"
static __attribute__((__unused__))const char*ident_cilk_cilk2c_pre=    "$HeadURL: https://bradley.csail.mit.edu/svn/repos/cilk/5.4.3/runtime/cilk-cilk2c-pre.h $ $LastChangedBy: bradley $ $Rev: 1465 $ $Date: 2004-08-02 06:31:06 -0400 (Mon, 02 Aug 2004) $";
#undef CILK_WHERE_AM_I
#define CILK_WHERE_AM_I IN_C_CODE
# 31
static inline void *Cilk_internal_malloc_fast(CilkWorkerState *const ws,
        size_t size)
{
     int bucket;
     void *mem;
     struct Cilk_im_descriptor *d;;
# 40
     if (size > 4096) 
   return Cilk_internal_malloc(ws, size);

     bucket = Cilk_internal_malloc_size_to_bucket(size);
     d = ws->im_descriptor + bucket;


     if ((mem=  d->free_list)) {
   d->free_list = ((void **) mem)[0];
   d->count++;
# 55
     } else {
   mem = Cilk_internal_malloc(ws, size);
     }

     return mem;
}
#undef CILK_WHERE_AM_I
#define CILK_WHERE_AM_I IN_C_CODE
# 62
static inline void Cilk_internal_free_fast(CilkWorkerState *const ws,
            void *p, size_t size)
{
     int bucket;
     struct Cilk_im_descriptor *d;

     if (size > 4096) {
   Cilk_internal_free(ws, p, size);
   return;
     }

     bucket = Cilk_internal_malloc_size_to_bucket(size);
     d = ws->im_descriptor + bucket;

     if (d->count <= 0) 
   Cilk_internal_free(ws, p, size);
     else {
   ((void **) p)[0] = d->free_list;
   d->free_list = p;
   d->count--;;
# 87
     }
}
#undef CILK_WHERE_AM_I
#define CILK_WHERE_AM_I IN_C_CODE
# 90
static inline void Cilk_destroy_frame_fast(CilkWorkerState *const ws,
            CilkStackFrame *f, size_t size)
{
     { if (f->alloca_h) Cilk_unalloca_internal(ws, f); };
# 99
     Cilk_internal_free_fast(ws, f, size);
}
#undef CILK_WHERE_AM_I
#define CILK_WHERE_AM_I IN_C_CODE
# 102
static inline void *Cilk_create_frame(CilkWorkerState *const ws,
       size_t size, CilkProcInfo *sig)
{
     CilkStackFrame *f=  Cilk_internal_malloc_fast(ws, size);
     f->sig = sig;
     f->alloca_h = (struct cilk_alloca_header *) 0;;


     return (void *) f;
}
#undef CILK_WHERE_AM_I
#define CILK_WHERE_AM_I IN_C_CODE
# 113
static inline void Cilk_cilk2c_push_frame( __attribute__((__unused__))CilkWorkerState*const ws,
           __attribute__((__unused__))CilkStackFrame*frame)
{;;;


     Cilk_membar_StoreStore();
}
#undef CILK_WHERE_AM_I
#define CILK_WHERE_AM_I IN_C_CODE
# 121
static inline void *Cilk_cilk2c_init_frame(CilkWorkerState *const ws,
            size_t s, CilkProcInfo *signat)
{
     volatile CilkStackFrame **t;
     void *f;

     f = Cilk_create_frame(ws, s, signat);
     t = ws->cache.tail;;


     *t = (CilkStackFrame *) f;
     Cilk_membar_StoreStore();
     ws->cache.tail = t + 1;
     return f;
}
#undef CILK_WHERE_AM_I
#define CILK_WHERE_AM_I IN_C_CODE


static inline int Cilk_cilk2c_pop_check(CilkWorkerState *const ws)
{
     volatile CilkStackFrame **t;
     t = ws->cache.tail;
     Cilk_membar_StoreLoad();
     return (ws->cache.exception>=  t);
}
#undef CILK_WHERE_AM_I
#define CILK_WHERE_AM_I IN_C_CODE
# 148
static inline void Cilk_cilk2c_pop(CilkWorkerState *const ws)
{
     --ws->cache.tail;
}
#undef CILK_WHERE_AM_I
#define CILK_WHERE_AM_I IN_C_CODE
# 153
static inline void Cilk_cilk2c_event_new_thread_maybe(
                                   __attribute__((__unused__))CilkWorkerState*const ws)
{;;


}
#undef CILK_WHERE_AM_I
#define CILK_WHERE_AM_I IN_C_CODE
# 160
static inline void Cilk_cilk2c_start_thread_slow( __attribute__((__unused__))CilkWorkerState*const ws,
           __attribute__((__unused__))CilkStackFrame*frame)
{;;;
# 166
}
#undef CILK_WHERE_AM_I
#define CILK_WHERE_AM_I IN_C_CODE
# 168
static inline void Cilk_cilk2c_before_return_fast(CilkWorkerState *const ws,
        CilkStackFrame *frame,
            size_t size)
{;;


     Cilk_destroy_frame_fast(ws, (CilkStackFrame *) frame, size);
     --ws->cache.tail;
}
#undef CILK_WHERE_AM_I
#define CILK_WHERE_AM_I IN_C_CODE
# 178
static inline void Cilk_cilk2c_before_return_slow(CilkWorkerState *const ws,
        CilkStackFrame *frame,
            size_t size)
{
     Cilk_cilk2c_before_return_fast(ws, frame, size);
}
#undef CILK_WHERE_AM_I
#define CILK_WHERE_AM_I IN_C_CODE
# 345
static inline void Cilk_cilk2c_start_thread_fast_cp(
     __attribute__((__unused__))CilkWorkerState*const ws,   __attribute__((__unused__))CilkStackFrame*frame)
{;;


}
#undef CILK_WHERE_AM_I
#define CILK_WHERE_AM_I IN_C_CODE
# 351
static inline void Cilk_cilk2c_start_thread_slow_cp(
     __attribute__((__unused__))CilkWorkerState*const ws,   __attribute__((__unused__))CilkStackFrame*frame)
{;;


}
#undef CILK_WHERE_AM_I
#define CILK_WHERE_AM_I IN_C_CODE
# 357
static inline void Cilk_cilk2c_at_thread_boundary_slow_cp(
     __attribute__((__unused__))CilkWorkerState*const ws,   __attribute__((__unused__))CilkStackFrame*frame)
{;;


}
#undef CILK_WHERE_AM_I
#define CILK_WHERE_AM_I IN_C_CODE
# 363
static inline void Cilk_cilk2c_before_spawn_fast_cp(
     __attribute__((__unused__))CilkWorkerState*const ws,   __attribute__((__unused__))CilkStackFrame*frame)
{;;


}
#undef CILK_WHERE_AM_I
#define CILK_WHERE_AM_I IN_C_CODE
# 369
static inline void Cilk_cilk2c_before_spawn_slow_cp(
     __attribute__((__unused__))CilkWorkerState*const ws,   __attribute__((__unused__))CilkStackFrame*frame)
{;;


}
#undef CILK_WHERE_AM_I
#define CILK_WHERE_AM_I IN_C_CODE
# 375
static inline void Cilk_cilk2c_after_spawn_fast_cp(
     __attribute__((__unused__))CilkWorkerState*const ws,   __attribute__((__unused__))CilkStackFrame*frame)
{;;


}
#undef CILK_WHERE_AM_I
#define CILK_WHERE_AM_I IN_C_CODE
# 381
static inline void Cilk_cilk2c_after_spawn_slow_cp(
     __attribute__((__unused__))CilkWorkerState*const ws,   __attribute__((__unused__))CilkStackFrame*frame)
{;;


}
#undef CILK_WHERE_AM_I
#define CILK_WHERE_AM_I IN_C_CODE
# 387
static inline void Cilk_cilk2c_at_sync_fast_cp(
     __attribute__((__unused__))CilkWorkerState*const ws,   __attribute__((__unused__))CilkStackFrame*frame)
{;;


}
#undef CILK_WHERE_AM_I
#define CILK_WHERE_AM_I IN_C_CODE
# 393
static inline void Cilk_cilk2c_before_sync_slow_cp(
     __attribute__((__unused__))CilkWorkerState*const ws,   __attribute__((__unused__))CilkStackFrame*frame)
{;;


}
#undef CILK_WHERE_AM_I
#define CILK_WHERE_AM_I IN_C_CODE
# 399
static inline void Cilk_cilk2c_after_sync_slow_cp(
     __attribute__((__unused__))CilkWorkerState*const ws,   __attribute__((__unused__))CilkStackFrame*frame)
{;;


}
#undef CILK_WHERE_AM_I
#define CILK_WHERE_AM_I IN_C_CODE
# 405
static inline void Cilk_cilk2c_before_return_fast_cp(
     __attribute__((__unused__))CilkWorkerState*const ws,   __attribute__((__unused__))CilkStackFrame*frame)
{;;


}
#undef CILK_WHERE_AM_I
#define CILK_WHERE_AM_I IN_C_CODE
# 411
static inline void Cilk_cilk2c_before_return_slow_cp(
     __attribute__((__unused__))CilkWorkerState*const ws,   __attribute__((__unused__))CilkStackFrame*frame)
{;;


}
# 502 "/usr/local/cilk-5.4.6/include/cilk/cilk.h"
extern int Cilk_flags_are_wrong_NODEBUG_NOTIMING_NOSTATS_please_recompile;
static int              *Cilk_check_flags_at_link_time=  &Cilk_flags_are_wrong_NODEBUG_NOTIMING_NOSTATS_please_recompile;

static __attribute__((__unused__))int Cilk_check_flags_at_link_time_hack(void);
#undef CILK_WHERE_AM_I
#define CILK_WHERE_AM_I IN_C_CODE
# 506
static int Cilk_check_flags_at_link_time_hack(void) {
     return *Cilk_check_flags_at_link_time;
}

void Cilk_start(CilkContext *const context,
  void( *main)(CilkWorkerState *const ws, void *args),
  void *args,
  int return_size);
void Cilk_free(void *);
void *Cilk_malloc_fixed(size_t);
# 46 "/usr/include/stdio.h"
typedef struct _IO_FILE FILE;
# 62
typedef struct _IO_FILE __FILE;
# 355 "/usr/lib/gcc/x86_64-redhat-linux/4.1.2/include/stddef.h"
typedef unsigned wint_t;
# 76 "/usr/include/wchar.h"
typedef struct ___sue26
{
  int __count;
  union ___sue25
  {
    wint_t __wch;
    char __wchb[4];
  }
# 79
  __value;
# 84
}
# 76
__mbstate_t;
# 26 "/usr/include/_G_config.h"
typedef struct ___sue27
{
  __off_t __pos;
  __mbstate_t __state;
}
# 26
_G_fpos_t;
# 31
typedef struct ___sue28
{
  __off64_t __pos;
  __mbstate_t __state;
}
# 31
_G_fpos64_t;
# 37 "/usr/include/gconv.h"
enum ___sue29
{
  __GCONV_OK=  0,
  __GCONV_NOCONV,
  __GCONV_NODB,
  __GCONV_NOMEM,

  __GCONV_EMPTY_INPUT,
  __GCONV_FULL_OUTPUT,
  __GCONV_ILLEGAL_INPUT,
  __GCONV_INCOMPLETE_INPUT,

  __GCONV_ILLEGAL_DESCRIPTOR,
  __GCONV_INTERNAL_ERROR
};
# 55
enum ___sue30
{
  __GCONV_IS_LAST=  0x0001,
  __GCONV_IGNORE_ERRORS=  0x0002
};
# 63
struct __gconv_step;
struct __gconv_step_data;
struct __gconv_loaded_object;
struct __gconv_trans_data;
# 70
typedef int( *__gconv_fct) (struct __gconv_step *, struct __gconv_step_data *,
       const unsigned char   **, const unsigned char   *,
       unsigned char **, size_t *, int, int);


typedef wint_t( *__gconv_btowc_fct) (struct __gconv_step *, unsigned char);


typedef int( *__gconv_init_fct) (struct __gconv_step *);
typedef void( *__gconv_end_fct) (struct __gconv_step *);
# 83
typedef int( *__gconv_trans_fct) (struct __gconv_step *,
      struct __gconv_step_data *, void *,
      const unsigned char   *,
      const unsigned char   **,
      const unsigned char   *, unsigned char **,
      size_t *);


typedef int( *__gconv_trans_context_fct) (void *, const unsigned char   *,
       const unsigned char   *,
       unsigned char *, unsigned char *);


typedef int( *__gconv_trans_query_fct) (const char   *, const char   ***,
     size_t *);


typedef int( *__gconv_trans_init_fct) (void **, const char *);
typedef void( *__gconv_trans_end_fct) (void *);

struct __gconv_trans_data
{

  __gconv_trans_fct __trans_fct;
  __gconv_trans_context_fct __trans_context_fct;
  __gconv_trans_end_fct __trans_end_fct;
  void *__data;
  struct __gconv_trans_data *__next;
};
# 115
struct __gconv_step
{
  struct __gconv_loaded_object *__shlib_handle;
  const char   *__modname;

  int __counter;

  char *__from_name;
  char *__to_name;

  __gconv_fct __fct;
  __gconv_btowc_fct __btowc_fct;
  __gconv_init_fct __init_fct;
  __gconv_end_fct __end_fct;
# 132
  int __min_needed_from;
  int __max_needed_from;
  int __min_needed_to;
  int __max_needed_to;


  int __stateful;

  void *__data;
};
# 145
struct __gconv_step_data
{
  unsigned char *__outbuf;
  unsigned char *__outbufend;
# 152
  int __flags;
# 156
  int __invocation_counter;
# 160
  int __internal_use;

  __mbstate_t *__statep;
  __mbstate_t __state;
# 167
  struct __gconv_trans_data *__trans;
};
# 172
typedef struct __gconv_info
{
  size_t __nsteps;
  struct __gconv_step *__steps;
  __extension__ struct __gconv_step_data __data [];
} *
# 172
__gconv_t;
# 45 "/usr/include/_G_config.h"
typedef union ___sue32
{
  struct __gconv_info __cd;
  struct ___sue31
  {
    struct __gconv_info __cd;
    struct __gconv_step_data __data;
  }
# 48
  __combined;
# 53
}
# 45
_G_iconv_t;
# 55
typedef __attribute__((__mode__ (                __HI__)))int _G_int16_t;
typedef __attribute__((__mode__ (                __SI__)))int _G_int32_t;
typedef __attribute__((__mode__ (                          __HI__)))unsigned _G_uint16_t;
typedef __attribute__((__mode__ (                          __SI__)))unsigned _G_uint32_t;
# 43 "/usr/lib/gcc/x86_64-redhat-linux/4.1.2/include/stdarg.h"
typedef __builtin_va_list __gnuc_va_list;
# 167 "/usr/include/libio.h"
struct _IO_jump_t; struct _IO_FILE;
# 177
typedef void _IO_lock_t;
# 183
struct _IO_marker {
  struct _IO_marker *_next;
  struct _IO_FILE *_sbuf;
# 189
  int _pos;
# 200
};


enum __codecvt_result
{
  __codecvt_ok,
  __codecvt_partial,
  __codecvt_error,
  __codecvt_noconv
};
# 268
struct _IO_FILE {
  int _flags;
# 274
  char*_IO_read_ptr;
  char*_IO_read_end;
  char*_IO_read_base;
  char*_IO_write_base;
  char*_IO_write_ptr;
  char*_IO_write_end;
  char*_IO_buf_base;
  char*_IO_buf_end;

  char *_IO_save_base;
  char *_IO_backup_base;
  char *_IO_save_end;

  struct _IO_marker *_markers;

  struct _IO_FILE *_chain;

  int _fileno;
# 295
  int _flags2;

  __off_t _old_offset;
# 301
  unsigned short _cur_column;
  signed char _vtable_offset;
  char _shortbuf[1];
# 307
  _IO_lock_t *_lock;
# 316
  __off64_t _offset;
# 325
  void *__pad1;
  void *__pad2;
  void *__pad3;
  void *__pad4;
  size_t __pad5;

  int _mode;

  char _unused2[15 * sizeof( int) - 4 * sizeof( void *) - sizeof( size_t)];

};


typedef struct _IO_FILE _IO_FILE;


struct _IO_FILE_plus;

extern struct _IO_FILE_plus _IO_2_1_stdin_;
extern struct _IO_FILE_plus _IO_2_1_stdout_;
extern struct _IO_FILE_plus _IO_2_1_stderr_;
# 361
typedef __ssize_t __io_read_fn (void *__cookie, char *__buf, size_t __nbytes);
# 369
typedef __ssize_t __io_write_fn (void *__cookie, const char   *__buf,
     size_t __n);
# 378
typedef int __io_seek_fn (void *__cookie, __off64_t *__pos, int __w);


typedef int __io_close_fn (void *__cookie);
# 413
extern __attribute__((__nothrow__))int __underflow(_IO_FILE*);
extern __attribute__((__nothrow__))int __uflow(_IO_FILE*);
extern __attribute__((__nothrow__))int __overflow(_IO_FILE*,int);
extern __attribute__((__nothrow__))wint_t __wunderflow(_IO_FILE*);
extern __attribute__((__nothrow__))wint_t __wuflow(_IO_FILE*);
extern __attribute__((__nothrow__))wint_t __woverflow(_IO_FILE*,wint_t);
# 451
extern __attribute__((__nothrow__))int _IO_getc(_IO_FILE*__fp);
extern __attribute__((__nothrow__))int _IO_putc(int __c,_IO_FILE*__fp);
extern __attribute__((__nothrow__))int _IO_feof(_IO_FILE*__fp);
extern __attribute__((__nothrow__))int _IO_ferror(_IO_FILE*__fp);

extern __attribute__((__nothrow__))int _IO_peekc_locked(_IO_FILE*__fp);
# 462
extern __attribute__((__nothrow__))void _IO_flockfile(_IO_FILE*);
extern __attribute__((__nothrow__))void _IO_funlockfile(_IO_FILE*);
extern __attribute__((__nothrow__))int _IO_ftrylockfile(_IO_FILE*);
# 481
extern int _IO_vfscanf (_IO_FILE *__restrict , const char *__restrict ,
   __gnuc_va_list, int *__restrict );
extern int _IO_vfprintf (_IO_FILE *__restrict ,const char *__restrict ,
    __gnuc_va_list);
extern __attribute__((__nothrow__))__ssize_t _IO_padn(_IO_FILE*,int,__ssize_t);
extern __attribute__((__nothrow__))size_t _IO_sgetn(_IO_FILE*,void*,size_t);

extern __attribute__((__nothrow__))__off64_t _IO_seekoff(_IO_FILE*,__off64_t,int,int);
extern __attribute__((__nothrow__))__off64_t _IO_seekpos(_IO_FILE*,__off64_t,int);

extern __attribute__((__nothrow__))void _IO_free_backup_area(_IO_FILE*);
# 88 "/usr/include/stdio.h"
typedef _G_fpos_t fpos_t;
# 142
extern struct _IO_FILE *stdin;
extern struct _IO_FILE *stdout;
extern struct _IO_FILE *stderr;
# 154
extern __attribute__((__nothrow__))int remove(const char*__filename);

extern __attribute__((__nothrow__))int rename(const char*__old,const char*__new);
# 171
extern FILE *tmpfile (void);
# 185
extern __attribute__((__nothrow__))char*tmpnam(char*__s);
# 191
extern __attribute__((__nothrow__))char*tmpnam_r(char*__s);
# 203
extern __attribute__((__nothrow__,__malloc__))char*tempnam(const char*__dir,const char*__pfx);
# 213
extern int fclose (FILE *__stream);
# 218
extern int fflush (FILE *__stream);
# 228
extern int fflush_unlocked (FILE *__stream);
# 248
extern FILE *fopen (const char   *__restrict __filename,
      const char   *__restrict __modes);
# 254
extern FILE *freopen (const char   *__restrict __filename,
        const char   *__restrict __modes,
        FILE *__restrict __stream);
# 280
extern __attribute__((__nothrow__))FILE*fdopen(int __fd,const char*__modes);
# 303
extern __attribute__((__nothrow__))void setbuf(FILE*__restrict __stream,char*__restrict __buf);
# 307
extern __attribute__((__nothrow__))int setvbuf(FILE*__restrict __stream,char*__restrict __buf,
      int __modes, size_t __n);
# 314
extern __attribute__((__nothrow__))void setbuffer(FILE*__restrict __stream,char*__restrict __buf,
         size_t __size);


extern __attribute__((__nothrow__))void setlinebuf(FILE*__stream);
# 327
extern int fprintf (FILE *__restrict __stream,
      const char   *__restrict __format,...);
# 333
extern int printf (const char   *__restrict __format,...);

extern __attribute__((__nothrow__))int sprintf(char*__restrict __s,
      const char   *__restrict __format,...);
# 342
extern int vfprintf (FILE *__restrict __s, const char   *__restrict __format,
       __gnuc_va_list __arg);
# 348
extern int vprintf (const char   *__restrict __format, __gnuc_va_list __arg);

extern __attribute__((__nothrow__))int vsprintf(char*__restrict __s,const char*__restrict __format,
       __gnuc_va_list __arg);
# 357
extern __attribute__((__nothrow__,__format__ (

                                                               __printf__, 3, 4)))
# 357
int snprintf        (char *__restrict __s, size_t __maxlen,
       const char   *__restrict __format,...);


extern __attribute__((__nothrow__,__format__ (

                                                               __printf__, 3, 0)))
# 361
int vsnprintf        (char *__restrict __s, size_t __maxlen,
        const char   *__restrict __format, __gnuc_va_list __arg);
# 399
extern int fscanf (FILE *__restrict __stream,
     const char   *__restrict __format,...);
# 405
extern int scanf (const char   *__restrict __format,...);

extern __attribute__((__nothrow__))int sscanf(const char*__restrict __s,
     const char   *__restrict __format,...);
# 441
extern int fgetc (FILE *__stream);
extern int getc (FILE *__stream);
# 448
extern int getchar (void);
# 460
extern int getc_unlocked (FILE *__stream);
extern int getchar_unlocked (void);
# 471
extern int fgetc_unlocked (FILE *__stream);
# 483
extern int fputc (int __c, FILE *__stream);
extern int putc (int __c, FILE *__stream);
# 490
extern int putchar (int __c);
# 504
extern int fputc_unlocked (int __c, FILE *__stream);
# 512
extern int putc_unlocked (int __c, FILE *__stream);
extern int putchar_unlocked (int __c);
# 520
extern int getw (FILE *__stream);


extern int putw (int __w, FILE *__stream);
# 532
extern char *fgets (char *__restrict __s, int __n, FILE *__restrict __stream);
# 540
extern char *gets (char *__s);
# 590
extern int fputs (const char   *__restrict __s, FILE *__restrict __stream);
# 596
extern int puts (const char   *__s);
# 603
extern int ungetc (int __c, FILE *__stream);
# 610
extern size_t fread (void *__restrict __ptr, size_t __size,
       size_t __n, FILE *__restrict __stream);
# 616
extern size_t fwrite (const void   *__restrict __ptr, size_t __size,
        size_t __n, FILE *__restrict __s);
# 638
extern size_t fread_unlocked (void *__restrict __ptr, size_t __size,
         size_t __n, FILE *__restrict __stream);
extern size_t fwrite_unlocked (const void   *__restrict __ptr, size_t __size,
          size_t __n, FILE *__restrict __stream);
# 650
extern int fseek (FILE *__stream, long __off,     int __whence);
# 655
extern long ftell     (FILE *__stream);
# 660
extern void rewind (FILE *__stream);
# 674
extern int fseeko (FILE *__stream, __off_t __off, int __whence);
# 679
extern __off_t ftello (FILE *__stream);
# 699
extern int fgetpos (FILE *__restrict __stream, fpos_t *__restrict __pos);
# 704
extern int fsetpos (FILE *__stream, const fpos_t   *__pos);
# 727
extern __attribute__((__nothrow__))void clearerr(FILE*__stream);

extern __attribute__((__nothrow__))int feof(FILE*__stream);

extern __attribute__((__nothrow__))int ferror(FILE*__stream);
# 736
extern __attribute__((__nothrow__))void clearerr_unlocked(FILE*__stream);
extern __attribute__((__nothrow__))int feof_unlocked(FILE*__stream);
extern __attribute__((__nothrow__))int ferror_unlocked(FILE*__stream);
# 747
extern void perror (const char   *__s);
# 27 "/usr/include/bits/sys_errlist.h"
extern int sys_nerr;
extern const char   *const sys_errlist  [];
# 759 "/usr/include/stdio.h"
extern __attribute__((__nothrow__))int fileno(FILE*__stream);
# 764
extern __attribute__((__nothrow__))int fileno_unlocked(FILE*__stream);
# 774
extern FILE *popen (const char   *__command, const char   *__modes);
# 780
extern int pclose (FILE *__stream);
# 786
extern __attribute__((__nothrow__))char*ctermid(char*__s);
# 814
extern __attribute__((__nothrow__))void flockfile(FILE*__stream);
# 818
extern __attribute__((__nothrow__))int ftrylockfile(FILE*__stream);


extern __attribute__((__nothrow__))void funlockfile(FILE*__stream);
# 98 "/usr/include/stdlib.h"
typedef struct ___sue33
  {
    int quot;
    int rem;
  }
# 98
div_t;
# 106
typedef struct ___sue34
  {
    long quot;
    long rem;
  }
# 106
ldiv_t;
# 140
extern __attribute__((__nothrow__))size_t __ctype_get_mb_cur_max(void);
# 145
extern __attribute__((__nothrow__,__pure__,__nonnull__ (
                                                                                           1)))
# 145
double atof        (const char   *__nptr);


extern __attribute__((__nothrow__,__pure__,__nonnull__ (
                                                                                           1)))
# 148
int atoi        (const char   *__nptr);


extern __attribute__((__nothrow__,__pure__,__nonnull__ (
                                                                                           1)))
# 151
long atol            (const char   *__nptr);
# 158
              extern __attribute__((__nothrow__,__pure__,__nonnull__ (
                                                                                           1)))
# 158
              long long atoll            (const char   *__nptr);
# 165
extern __attribute__((__nothrow__,__nonnull__ (

                                                                1)))
# 165
double strtod        (const char   *__restrict __nptr,
        char **__restrict __endptr);
# 184
extern __attribute__((__nothrow__,__nonnull__ (

                                                                1)))
# 184
long strtol            (const char   *__restrict __nptr,
   char **__restrict __endptr, int __base);


extern __attribute__((__nothrow__,__nonnull__ (

                                                                1)))
# 188
unsigned long strtoul            (const char   *__restrict __nptr,
      char **__restrict __endptr, int __base);
# 196
extern __attribute__((__nothrow__,__nonnull__ (

                                                                1)))
# 196
long long strtoq            (const char   *__restrict __nptr,
        char **__restrict __endptr, int __base);
# 201
extern __attribute__((__nothrow__,__nonnull__ (

                                                                1)))
# 201
unsigned long long strtouq            (const char   *__restrict __nptr,
           char **__restrict __endptr, int __base);
# 210
extern __attribute__((__nothrow__,__nonnull__ (

                                                                1)))
# 210
long long strtoll            (const char   *__restrict __nptr,
         char **__restrict __endptr, int __base);
# 215
extern __attribute__((__nothrow__,__nonnull__ (

                                                                1)))
# 215
unsigned long long strtoull            (const char   *__restrict __nptr,
     char **__restrict __endptr, int __base);
# 279
extern __attribute__((__nothrow__,__nonnull__ (

                                                                1)))
# 279
double __strtod_internal        (const char   *__restrict __nptr,
     char **__restrict __endptr, int __group);

extern __attribute__((__nothrow__,__nonnull__ (

                                                                1)))
# 282
float __strtof_internal        (const char   *__restrict __nptr,
    char **__restrict __endptr, int __group);

extern __attribute__((__nothrow__,__nonnull__ (


                                                                1)))
# 285
long double __strtold_internal        (const char   *__restrict __nptr,
           char **__restrict __endptr,
           int __group);


extern __attribute__((__nothrow__,__nonnull__ (


                                                                1)))
# 290
long __strtol_internal            (const char   *__restrict __nptr,
       char **__restrict __endptr,
       int __base, int __group);
# 297
extern __attribute__((__nothrow__,__nonnull__ (


                                                                1)))
# 297
unsigned long __strtoul_internal            (const char   *__restrict __nptr,
          char **__restrict __endptr,
          int __base, int __group);
# 306
extern __attribute__((__nothrow__,__nonnull__ (


                                                                1)))
# 306
long long __strtoll_internal            (const char   *__restrict __nptr,
      char **__restrict __endptr,
      int __base, int __group);
# 314
extern __attribute__((__nothrow__,__nonnull__ (
# 318
                                                                1)))
# 314
unsigned long long __strtoull_internal            (const char   *__restrict __nptr,

         char **__restrict __endptr,
         int __base, int __group);
# 429
extern __attribute__((__nothrow__))char*l64a(long __n);


extern __attribute__((__nothrow__,__pure__,__nonnull__ (
                                                                                           1)))
# 432
long a64l            (const char   *__s);
# 445
extern __attribute__((__nothrow__))long random(void);


extern __attribute__((__nothrow__))void srandom(unsigned __seed);
# 454
extern __attribute__((__nothrow__,__nonnull__ (
                                                                                 2)))
# 454
char        *initstate (unsigned __seed,     char *__statebuf,
   size_t __statelen);
# 459
extern __attribute__((__nothrow__,__nonnull__ (                                                     1)))char*setstate(char*__statebuf);
# 467
struct random_data
  {
    int32_t *fptr;
    int32_t *rptr;
    int32_t *state;
    int rand_type;
    int rand_deg;
    int rand_sep;
    int32_t *end_ptr;
  };

extern __attribute__((__nothrow__,__nonnull__ (
                                                                                                1, 2)))
# 478
int random_r        (struct random_data *__restrict __buf,
       int32_t *__restrict __result);

extern __attribute__((__nothrow__,__nonnull__ (
                                                                2)))
# 481
int srandom_r        (unsigned __seed,     struct random_data *__buf);


extern __attribute__((__nothrow__,__nonnull__ (


                                                                2, 4)))
# 484
int initstate_r        (unsigned __seed,     char *__restrict __statebuf,
   size_t __statelen,
   struct random_data *__restrict __buf);


extern __attribute__((__nothrow__,__nonnull__ (

                                                                1, 2)))
# 489
int setstate_r        (char *__restrict __statebuf,
         struct random_data *__restrict __buf);
# 498
extern __attribute__((__nothrow__))int rand(void);

extern __attribute__((__nothrow__))void srand(unsigned __seed);
# 505
extern __attribute__((__nothrow__))int rand_r(unsigned*__seed);
# 513
extern __attribute__((__nothrow__))double drand48(void);
extern __attribute__((__nothrow__,__nonnull__ (                                                                  1)))double erand48(unsigned short*__xsubi);


extern __attribute__((__nothrow__))long lrand48(void);
extern __attribute__((__nothrow__,__nonnull__ (
                                                                1)))
# 518
long nrand48            (unsigned short            *__xsubi);
# 522
extern __attribute__((__nothrow__))long mrand48(void);
extern __attribute__((__nothrow__,__nonnull__ (
                                                                1)))
# 523
long jrand48            (unsigned short            *__xsubi);
# 527
extern __attribute__((__nothrow__))void srand48(long __seedval);
extern __attribute__((__nothrow__,__nonnull__ (
                                                                1)))
# 528
unsigned short            *seed48 (unsigned short              *__seed16v);

extern __attribute__((__nothrow__,__nonnull__ (                                                                1)))void lcong48(unsigned short*__param);
# 536
struct drand48_data
  {
    unsigned short __x    [3];
    unsigned short __old_x    [3];
    unsigned short __c;
    unsigned short __init;
    unsigned long long __a;
  };


extern __attribute__((__nothrow__,__nonnull__ (
                                                                                                1, 2)))
# 546
int drand48_r        (struct drand48_data *__restrict __buffer,
        double *__restrict __result);
extern __attribute__((__nothrow__,__nonnull__ (

                                                                                                1, 2)))
# 548
int erand48_r        (unsigned short            *__xsubi,
        struct drand48_data *__restrict __buffer,
        double *__restrict __result);


extern __attribute__((__nothrow__,__nonnull__ (

                                                                1, 2)))
# 553
int lrand48_r        (struct drand48_data *__restrict __buffer,
        long     *__restrict __result);

extern __attribute__((__nothrow__,__nonnull__ (


                                                                1, 2)))
# 556
int nrand48_r        (unsigned short            *__xsubi,
        struct drand48_data *__restrict __buffer,
        long     *__restrict __result);
# 562
extern __attribute__((__nothrow__,__nonnull__ (

                                                                1, 2)))
# 562
int mrand48_r        (struct drand48_data *__restrict __buffer,
        long     *__restrict __result);

extern __attribute__((__nothrow__,__nonnull__ (


                                                                1, 2)))
# 565
int jrand48_r        (unsigned short            *__xsubi,
        struct drand48_data *__restrict __buffer,
        long     *__restrict __result);
# 571
extern __attribute__((__nothrow__,__nonnull__ (
                                                                2)))
# 571
int srand48_r        (long __seedval,     struct drand48_data *__buffer);


extern __attribute__((__nothrow__,__nonnull__ (
                                                                                                 1, 2)))
# 574
int seed48_r        (unsigned short              *__seed16v,
       struct drand48_data *__buffer);

extern __attribute__((__nothrow__,__nonnull__ (

                                                                1, 2)))
# 577
int lcong48_r        (unsigned short            *__param,
        struct drand48_data *__buffer);
# 589
extern __attribute__((__nothrow__,__malloc__))void*malloc(size_t __size);

extern __attribute__((__nothrow__,__malloc__))void*calloc(size_t __nmemb,size_t __size);
# 600
extern __attribute__((__nothrow__,__malloc__,__warn_unused_result__))void*realloc(void*__ptr,size_t __size);


extern __attribute__((__nothrow__))void free(void*__ptr);
# 608
extern __attribute__((__nothrow__))void cfree(void*__ptr);
# 33 "/usr/include/alloca.h"
extern __attribute__((__nothrow__))void*alloca(size_t __size);
# 617 "/usr/include/stdlib.h"
extern __attribute__((__nothrow__,__malloc__))void*valloc(size_t __size);
# 622
extern __attribute__((__nothrow__,__nonnull__ (
                                                                1)))
# 622
int posix_memalign        (void **__memptr, size_t __alignment, size_t __size);
# 628
extern __attribute__((__nothrow__,__noreturn__))void abort(void);
# 632
extern __attribute__((__nothrow__,__nonnull__ (                                                      1)))int atexit(void(*__func)(void));
# 638
extern __attribute__((__nothrow__,__nonnull__ (
                                                                1)))
# 638
int on_exit        (void( *__func) (int __status, void *__arg), void *__arg);
# 646
extern __attribute__((__nothrow__,__noreturn__))void exit(int __status);
# 660
extern __attribute__((__nothrow__,__nonnull__ (                                                       1)))char*getenv(const char*__name);
# 665
extern __attribute__((__nothrow__,__nonnull__ (
                                                                1)))
# 665
char        *__secure_getenv (const char   *__name);
# 672
extern __attribute__((__nothrow__,__nonnull__ (                                               1)))int putenv(char*__string);
# 678
extern __attribute__((__nothrow__,__nonnull__ (
                                                                2)))
# 678
int setenv        (const char   *__name, const char   *__value, int __replace);
# 682
extern __attribute__((__nothrow__))int unsetenv(const char*__name);
# 689
extern __attribute__((__nothrow__))int clearenv(void);
# 698
extern __attribute__((__nothrow__,__nonnull__ (                                                   1)))char*mktemp(char*__template);
# 709
extern __attribute__((__nonnull__ (                                1)))int mkstemp(char*__template);
# 729
extern __attribute__((__nothrow__,__nonnull__ (                                                    1)))char*mkdtemp(char*__template);
# 738
extern int system (const char   *__command);
# 757
extern __attribute__((__nothrow__))char*realpath(const char*__restrict __name,
         char *__restrict __resolved);
# 765
typedef int( *__compar_fn_t) (const void   *, const void   *);
# 775
extern __attribute__((__nonnull__ (

                                  1, 2, 5)))
# 775
void        *bsearch (const void   *__key, const void   *__base,
        size_t __nmemb, size_t __size, __compar_fn_t __compar);
# 781
extern __attribute__((__nonnull__ (
                                                          1, 4)))
# 781
void qsort        (void *__base, size_t __nmemb, size_t __size,
     __compar_fn_t __compar);
# 786
extern __attribute__((__nothrow__,const))int abs(int __x);
extern __attribute__((__nothrow__,const))long labs(long __x);
# 800
extern __attribute__((__nothrow__,const))div_t div(int __numer,int __denom);

extern __attribute__((__nothrow__,const))ldiv_t ldiv(long __numer,long __denom);
# 822
extern __attribute__((__nothrow__,__nonnull__ (
                                                                                        3, 4)))
# 822
char        *ecvt (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign);
# 828
extern __attribute__((__nothrow__,__nonnull__ (
                                                                                        3, 4)))
# 828
char        *fcvt (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign);
# 834
extern __attribute__((__nothrow__,__nonnull__ (
                                                                3)))
# 834
char        *gcvt (double __value, int __ndigit, char *__buf);
# 840
extern __attribute__((__nothrow__,__nonnull__ (

                                                                3, 4)))
# 840
char        *qecvt (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign);

extern __attribute__((__nothrow__,__nonnull__ (

                                                                3, 4)))
# 843
char        *qfcvt (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign);

extern __attribute__((__nothrow__,__nonnull__ (
                                                                3)))
# 846
char        *qgcvt (long double __value, int __ndigit, char *__buf);
# 852
extern __attribute__((__nothrow__,__nonnull__ (

                                                                              3, 4, 5)))
# 852
int ecvt_r        (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign, char *__restrict __buf,
     size_t __len);
extern __attribute__((__nothrow__,__nonnull__ (

                                                                              3, 4, 5)))
# 855
int fcvt_r        (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign, char *__restrict __buf,
     size_t __len);

extern __attribute__((__nothrow__,__nonnull__ (


                                                                3, 4, 5)))
# 859
int qecvt_r        (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign,
      char *__restrict __buf, size_t __len);

extern __attribute__((__nothrow__,__nonnull__ (


                                                                3, 4, 5)))
# 863
int qfcvt_r        (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign,
      char *__restrict __buf, size_t __len);
# 874
extern __attribute__((__nothrow__))int mblen(const char*__s,size_t __n);


extern __attribute__((__nothrow__))int mbtowc(wchar_t*__restrict __pwc,
     const char   *__restrict __s, size_t __n);


extern __attribute__((__nothrow__))int wctomb(char*__s,wchar_t __wchar);
# 885
extern __attribute__((__nothrow__))size_t mbstowcs(wchar_t*__restrict __pwcs,
   const char   *__restrict __s, size_t __n);

extern __attribute__((__nothrow__))size_t wcstombs(char*__restrict __s,
   const wchar_t   *__restrict __pwcs, size_t __n);
# 899
extern __attribute__((__nothrow__,__nonnull__ (                                                          1)))int rpmatch(const char*__response);
# 927
extern int posix_openpt (int __oflag);
# 962
extern __attribute__((__nothrow__,__nonnull__ (
                                                                1)))
# 962
int getloadavg        (double          *__loadavg,int __nelem);
# 59 "/usr/include/getopt.h"
extern char *optarg;
# 73
extern int optind;
# 78
extern int opterr;
# 82
extern int optopt;
# 106
struct option
{
  const char *name;


  int has_arg;
  int *flag;
  int val;
};
# 152
extern __attribute__((__nothrow__))int getopt(int ___argc,char*const *___argv,const char*__shortopts);
# 159
extern __attribute__((__nothrow__))int getopt_long(int ___argc,char*const *___argv,
   const char *__shortopts,
          const struct option *__longopts, int *__longind);

extern __attribute__((__nothrow__))int getopt_long_only(int ___argc,char*const *___argv,
        const char *__shortopts,
               const struct option *__longopts, int *__longind);
# 6 "fib.cilk"
enum TYPE{serial, parallel};
enum TYPE run_type=  serial;

int n=  0;
int result=  0;
#undef CILK_WHERE_AM_I
#define CILK_WHERE_AM_I IN_C_CODE
# 11
void praseArgv(int argc, char *     *argv)
{
 long opt;
 n = 10;
 while ((opt= getopt(argc, argv, "p:s:")) != -1) 
 {
  switch (opt) 
  {
   case 's':  n = atoi(optarg);break;
   case 'p':  run_type = parallel;
        n = atoi(optarg);
        break;
   default:  n = 10; break;
  }
 }
}
#undef CILK_WHERE_AM_I
#define CILK_WHERE_AM_I IN_C_CODE
# 28
int fib(int n)
{
 if (n < 2) return n;
 else 
 {
  int x;int y;

  x = fib (n - 1);
  y = fib (n - 2);

  return (x+  y);
 }
}

struct _cilk_pfib_frame{CilkStackFrame header;struct{int n;}scope0;struct{int x;int y;}scope1;};struct _cilk_pfib_args{int _cilk_proc_result;int n;};static void _cilk_pfib_slow(CilkWorkerState*const _cilk_ws,struct _cilk_pfib_frame*_cilk_frame);static CilkProcInfo _cilk_pfib_sig[]={{sizeof(int),sizeof(struct _cilk_pfib_frame),_cilk_pfib_slow,0,0},{sizeof(int),CILK_OFFSETOF(struct _cilk_pfib_frame,scope1.x),0,0,0},{sizeof(int),CILK_OFFSETOF(struct _cilk_pfib_frame,scope1.y),0,0,0},{0,0,0,0,0}};
#undef CILK_WHERE_AM_I
#define CILK_WHERE_AM_I IN_FAST_PROCEDURE
# 42
int pfib     (CilkWorkerState*const _cilk_ws,int n){struct _cilk_pfib_frame*_cilk_frame;CILK2C_INIT_FRAME(_cilk_frame,sizeof(struct _cilk_pfib_frame),_cilk_pfib_sig);CILK2C_START_THREAD_FAST();
{
 if (n < 2) {int _cilk_temp0=n;CILK2C_BEFORE_RETURN_FAST();return _cilk_temp0;}
 else 
 {
  int x;int y;

  {_cilk_frame->header.entry=1;_cilk_frame->scope0.n=n;CILK2C_BEFORE_SPAWN_FAST();CILK2C_PUSH_FRAME(_cilk_frame);x=pfib(_cilk_ws,n-1);{int __tmp;CILK2C_XPOP_FRAME_RESULT(_cilk_frame,0,x);}CILK2C_AFTER_SPAWN_FAST();}
  {_cilk_frame->header.entry=2;_cilk_frame->scope1.x=x;CILK2C_BEFORE_SPAWN_FAST();CILK2C_PUSH_FRAME(_cilk_frame);y=pfib(_cilk_ws,n-2);{int __tmp;CILK2C_XPOP_FRAME_RESULT(_cilk_frame,0,y);}CILK2C_AFTER_SPAWN_FAST();}

  CILK2C_AT_SYNC_FAST();

  {int _cilk_temp1=(x+y);CILK2C_BEFORE_RETURN_FAST();return _cilk_temp1;}
 }
}}
#undef CILK_WHERE_AM_I
#define CILK_WHERE_AM_I IN_SLOW_PROCEDURE
# 42
static void _cilk_pfib_slow(CilkWorkerState*const _cilk_ws,struct _cilk_pfib_frame*_cilk_frame){int n;CILK2C_START_THREAD_SLOW();switch (_cilk_frame->header.entry) {case 1: goto _cilk_sync1;case 2: goto _cilk_sync2;case 3: goto _cilk_sync3;}n=_cilk_frame->scope0.n;
{
 if (n < 2) {{int __tmp=n;Cilk_set_result(_cilk_ws,&__tmp,sizeof((__tmp)));}CILK2C_BEFORE_RETURN_SLOW();return;}
 else 
 {


  {int _cilk_temp2;_cilk_frame->header.entry=1;_cilk_frame->scope0.n=n;CILK2C_BEFORE_SPAWN_SLOW();CILK2C_PUSH_FRAME(_cilk_frame);_cilk_temp2=pfib(_cilk_ws,n-1);{int __tmp;CILK2C_XPOP_FRAME_RESULT(_cilk_frame,/* return nothing */,_cilk_temp2);}CILK2C_AFTER_SPAWN_SLOW();_cilk_frame->scope1.x=_cilk_temp2;if (0) {_cilk_sync1:n=_cilk_frame->scope0.n;}CILK2C_AT_THREAD_BOUNDARY_SLOW();}
  {int _cilk_temp3;_cilk_frame->header.entry=2;CILK2C_BEFORE_SPAWN_SLOW();CILK2C_PUSH_FRAME(_cilk_frame);_cilk_temp3=pfib(_cilk_ws,n-2);{int __tmp;CILK2C_XPOP_FRAME_RESULT(_cilk_frame,/* return nothing */,_cilk_temp3);}CILK2C_AFTER_SPAWN_SLOW();_cilk_frame->scope1.y=_cilk_temp3;if (0) {_cilk_sync2:;}CILK2C_AT_THREAD_BOUNDARY_SLOW();}

  {CILK2C_BEFORE_SYNC_SLOW();_cilk_frame->header.entry=3;if (CILK2C_SYNC) {return;_cilk_sync3:;}CILK2C_AFTER_SYNC_SLOW();CILK2C_AT_THREAD_BOUNDARY_SLOW();}

  {{int __tmp=(_cilk_frame->scope1.x+_cilk_frame->scope1.y);Cilk_set_result(_cilk_ws,&__tmp,sizeof((__tmp)));}CILK2C_BEFORE_RETURN_SLOW();return;}
 }
}}
#undef CILK_WHERE_AM_I
#define CILK_WHERE_AM_I IN_C_CODE
# 42
static void _cilk_pfib_import(CilkWorkerState*const _cilk_ws,void*_cilk_procargs_v)
{(void)_cilk_ws;(void)_cilk_procargs_v;((struct _cilk_pfib_args*)_cilk_procargs_v)->_cilk_proc_result=pfib(_cilk_ws,((struct _cilk_pfib_args*)_cilk_procargs_v)->n);
# 56
}
#undef CILK_WHERE_AM_I
#define CILK_WHERE_AM_I IN_C_CODE
# 42
int mt_pfib(CilkContext*const context,int n)
{struct _cilk_pfib_args*_cilk_procargs;
# 42
int _cilk_proc_result;_cilk_procargs=(struct _cilk_pfib_args*)Cilk_malloc_fixed(sizeof(struct _cilk_pfib_args));_cilk_procargs->n=n;Cilk_start(context,_cilk_pfib_import,_cilk_procargs,sizeof(int));_cilk_proc_result=_cilk_procargs->_cilk_proc_result;Cilk_free(_cilk_procargs);return _cilk_proc_result;
# 56
}


struct _cilk_cilk_main_frame{CilkStackFrame header;struct{int argc;char**argv;}scope0;struct{struct timeval start;struct timeval end;double time_use;}scope1;};struct _cilk_cilk_main_args{int _cilk_proc_result;int argc;char**argv;};static void _cilk_cilk_main_slow(CilkWorkerState*const _cilk_ws,struct _cilk_cilk_main_frame*_cilk_frame);static CilkProcInfo _cilk_cilk_main_sig[]={{sizeof(int),sizeof(struct _cilk_cilk_main_frame),_cilk_cilk_main_slow,0,0},{sizeof(int),-1,0,0,0},{0,0,0,0,0}};
#undef CILK_WHERE_AM_I
#define CILK_WHERE_AM_I IN_FAST_PROCEDURE
# 59
int cilk_main(CilkWorkerState*const _cilk_ws,int argc,char**argv){struct _cilk_cilk_main_frame*_cilk_frame;CILK2C_INIT_FRAME(_cilk_frame,sizeof(struct _cilk_cilk_main_frame),_cilk_cilk_main_sig);CILK2C_START_THREAD_FAST();
{

 double time_use=  0;
 praseArgv(argc, argv);
 gettimeofday(&_cilk_frame->scope1.start,0);
 if (run_type == serial) 
 {
  result = fib(n);
 }
 else 
 {
  {int _cilk_temp4;int*_cilk_temp5;_cilk_temp5=&result;_cilk_frame->header.receiver=(void*)_cilk_temp5;_cilk_frame->header.entry=1;CILK2C_BEFORE_SPAWN_FAST();CILK2C_PUSH_FRAME(_cilk_frame);_cilk_temp4=pfib(_cilk_ws,n);{int __tmp;CILK2C_XPOP_FRAME_RESULT(_cilk_frame,0,_cilk_temp4);}CILK2C_AFTER_SPAWN_FAST();*_cilk_temp5=_cilk_temp4;}
  CILK2C_AT_SYNC_FAST();
 }
 gettimeofday(&_cilk_frame->scope1.end,0);
  time_use = 1000000 * (_cilk_frame->scope1.end.tv_sec-_cilk_frame->scope1.start.tv_sec)+_cilk_frame->scope1.end.tv_usec-_cilk_frame->scope1.start.tv_usec;
 if (run_type== serial) 
  printf("mode serial\n");
 else 
  printf("mode parallel \n");
 printf("result = %d, timeuse = %lf\n", result, time_use / 1000);
 {int _cilk_temp6=0;CILK2C_BEFORE_RETURN_FAST();return _cilk_temp6;}
}}
#undef CILK_WHERE_AM_I
#define CILK_WHERE_AM_I IN_SLOW_PROCEDURE
# 59
static void _cilk_cilk_main_slow(CilkWorkerState*const _cilk_ws,struct _cilk_cilk_main_frame*_cilk_frame){int argc;char**argv;CILK2C_START_THREAD_SLOW();switch (_cilk_frame->header.entry) {case 1: goto _cilk_sync1;case 2: goto _cilk_sync2;}argc=_cilk_frame->scope0.argc;argv=_cilk_frame->scope0.argv;
{

 double time_use=  0;
 praseArgv(argc, argv);
 gettimeofday(&_cilk_frame->scope1.start,0);
 if (run_type == serial) 
 {
  result = fib(n);
 }
 else 
 {
  {int _cilk_temp7;int*_cilk_temp8;_cilk_temp8=&result;_cilk_frame->header.receiver=(void*)_cilk_temp8;_cilk_frame->header.entry=1;CILK2C_BEFORE_SPAWN_SLOW();CILK2C_PUSH_FRAME(_cilk_frame);_cilk_temp7=pfib(_cilk_ws,n);{int __tmp;CILK2C_XPOP_FRAME_RESULT(_cilk_frame,/* return nothing */,_cilk_temp7);}CILK2C_AFTER_SPAWN_SLOW();*_cilk_temp8=_cilk_temp7;if (0) {_cilk_sync1:;}CILK2C_AT_THREAD_BOUNDARY_SLOW();}
  {CILK2C_BEFORE_SYNC_SLOW();_cilk_frame->header.entry=2;if (CILK2C_SYNC) {return;_cilk_sync2:;}CILK2C_AFTER_SYNC_SLOW();CILK2C_AT_THREAD_BOUNDARY_SLOW();}
 }
 gettimeofday(&_cilk_frame->scope1.end,0);
  time_use = 1000000 * (_cilk_frame->scope1.end.tv_sec-_cilk_frame->scope1.start.tv_sec)+_cilk_frame->scope1.end.tv_usec-_cilk_frame->scope1.start.tv_usec;
 if (run_type== serial) 
  printf("mode serial\n");
 else 
  printf("mode parallel \n");
 printf("result = %d, timeuse = %lf\n", result, time_use / 1000);
 {{int __tmp=0;Cilk_set_result(_cilk_ws,&__tmp,sizeof((__tmp)));}CILK2C_BEFORE_RETURN_SLOW();return;}
}}
#undef CILK_WHERE_AM_I
#define CILK_WHERE_AM_I IN_C_CODE
# 59
static void _cilk_cilk_main_import(CilkWorkerState*const _cilk_ws,void*_cilk_procargs_v)
{(void)_cilk_ws;(void)_cilk_procargs_v;((struct _cilk_cilk_main_args*)_cilk_procargs_v)->_cilk_proc_result=cilk_main(_cilk_ws,((struct _cilk_cilk_main_args*)_cilk_procargs_v)->argc,((struct _cilk_cilk_main_args*)_cilk_procargs_v)->argv);
# 82
}
#undef CILK_WHERE_AM_I
#define CILK_WHERE_AM_I IN_C_CODE
# 59
int mt_cilk_main(CilkContext*const context,int argc,char**argv)
{struct _cilk_cilk_main_args*_cilk_procargs;
# 59
int _cilk_proc_result;_cilk_procargs=(struct _cilk_cilk_main_args*)Cilk_malloc_fixed(sizeof(struct _cilk_cilk_main_args));_cilk_procargs->argc=argc;_cilk_procargs->argv=argv;Cilk_start(context,_cilk_cilk_main_import,_cilk_procargs,sizeof(int));_cilk_proc_result=_cilk_procargs->_cilk_proc_result;Cilk_free(_cilk_procargs);return _cilk_proc_result;
# 82
}
